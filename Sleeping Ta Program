#include <pthread.h>
#include <time.h>			//random zaman atamak için
#include <unistd.h>			//uyku için
#include <semaphore.h>		//semaforlar için
#include <stdlib.h>
#include <stdio.h>

pthread_t *Ogrenciler;
pthread_t AG;

int Sandelyeler = 0;
int CurrentIndex = 0;

//semaforlar ve mutex için oluşturma
sem_t AG_uyku;
sem_t ogrencisemafor;
sem_t Sandalyesayisi[4];
pthread_mutex_t Sandelyenin_gorevi;

void *Arastirmagorevlisi();

_Noreturn void *Ogrenci(void *ogrencinumarasi);
//noreturn yapmamınız nedeni fonksiyon tekrar dönebilsin diye yani return ifadesini yürüterek veya işlev gövdesinin sonuna ulaşarak dönmediğini belirtir.

int main(int argc, char* argv[])
{
    int ogrencidizisi;		//öğrenci dizileri oluşturmak için kullanılan değişken
    int id;
    int ogrencisayisi=5;
//    printf("kac kisilik ogrenci olusturacaksiniz..?\n");           /bu kısımda öğrenci sayisini kullanıcan almak istedim fakat sandalye sayısıldı bağlantısını kuramadığım için
//    scanf("%d",&ogrencisayisi);

    srand(time(NULL));


    //Mutex ve semaforlar için oluşturma.
    sem_init(&AG_uyku, 0, 0);
    sem_init(&ogrencisemafor, 0, 0);
    for(id = 1; id <= ogrencisayisi; ++id)
        sem_init(&Sandalyesayisi[id], 0, 0);

    pthread_mutex_init(&Sandelyenin_gorevi, NULL);

    if(argc<2)
    {
        printf("%d ogrenci calismaya basliyor. \n", ogrencisayisi);
        ogrencidizisi = ogrencisayisi;
    }
    else
    {
        printf("Belirtilen ogrenci Sayısı. %d is parçacigi olusturuluyor.\n", ogrencidizisi);
        ogrencisayisi = atoi(argv[1]);
    }

    //öğrenciler için malloc ile fazla yer kaplanmasın diye diziye malloc ile yer açıyoruz.
    Ogrenciler = (pthread_t*) malloc(sizeof(pthread_t) * ogrencidizisi);

    //ogrenci ve Araştırma görevlisi için iş kısmı.
    pthread_create(&AG, NULL, Arastirmagorevlisi, NULL);
    for(id =1; id <= ogrencidizisi; id++)
        pthread_create(&Ogrenciler[id], NULL, Ogrenci, (void *) (long) id);

    //pthread_create kısmı programın zamanla örtüşen farklı iş akışını kontrol etmesine izin verir.
    //pthread_join  kısmı threadin sonlanmasını beklemek için yani thread sonlanana kadar bloklama yapar.

    //Öğrenciler ve Araştırma görevlisi için bekleme kısmı.
    pthread_join(AG, NULL);
    for(id = 1; id <= ogrencidizisi; id++)
        pthread_join(Ogrenciler[id], NULL);
    return 0;
}

void *Arastirmagorevlisi() // Arastırma görevlisine ait yapılacaklar fonksiyonu
{
    while(1)
    {
        sem_wait(&AG_uyku); //Burda Arastirma gorevlisi(araştırma görevlisi) uyandırılıyor.
        printf("\n" "---------------   Arastirma gorevlisi bir ogrenci tarafindan uyandirildi. ------------------ \n \n");

        while(1)
        {
            // pthread_mutex_lock ise verilen mutexsi kilitlemeye yarar.
            pthread_mutex_lock(&Sandelyenin_gorevi);
            if(Sandelyeler == 0)
            {
                //sandelyeler boşsa programı kapatıyor.
                pthread_mutex_unlock(&Sandelyenin_gorevi);
                break;
            }
            //bir sonraki öğrenciyi sandalyeye oturtmak için.
            //sem_post semaforun değerini 1 artırmak için.
            sem_post(&Sandalyesayisi[CurrentIndex]);
            Sandelyeler--;
            printf("ogrenci sandalyesini terk etti. Kalan Sandalye %d\n", 3 - Sandelyeler);
            CurrentIndex = (CurrentIndex + 1) % 3;
            pthread_mutex_unlock(&Sandelyenin_gorevi);

            printf("\t \n" "Arastirmagorevlisi su anda ogrenciye yardim ediyor.\n");
            sleep(6);
            sem_post(&ogrencisemafor);
            usleep(1000);
        }
    }
}
_Noreturn void *Ogrenci(void *ogrencinumarasi) // ogrenciler için yapılacak olan işlemlerin fonksiyonu
{
    int Zaman;
    while(1)
    {
        printf("\n" "ogrenci %ld programlama odevi yapiyor.\n", (long)ogrencinumarasi);
        Zaman = rand() % 10 + 1;
        sleep(Zaman);		//programın hızlı bir şekilde değil zaman zaman yavaş yavaş işlemesi için

        printf("\n %ld numarali ogrencinin Arastirmagorevlisi'nin yardimina ihtiyaci var\n", (long)ogrencinumarasi);

        pthread_mutex_lock(&Sandelyenin_gorevi);
        int count = Sandelyeler;
        pthread_mutex_unlock(&Sandelyenin_gorevi);

        if(count < 3)
        {
            if(count == 0)		//ögrenci ilk boş sandalyeye oturunca Ag uyandırılıyor.
                sem_post(&AG_uyku);
            else
                printf("\n""ogrenci %ld bir sandalyeye oturdu ve AG'nin bitirmesini bekledi.\n", (long)ogrencinumarasi);


            pthread_mutex_lock(&Sandelyenin_gorevi);
            int index = (CurrentIndex + Sandelyeler) % 3;
            Sandelyeler++;
            printf("ogrenci sandalyeye oturdu.Kalan Sandalyeler: %d\n", 3 - Sandelyeler);
            pthread_mutex_unlock(&Sandelyenin_gorevi);

            sem_wait(&Sandalyesayisi[index]);		//öğrenci burda sandalyeye terk ediyor
            printf("\t \n"
                   "ogrenci %ld, Arastirmagorevlisi'dan yardim aliyor. \n", (long)ogrencinumarasi);
            sem_wait(&ogrencisemafor);		//öğrenci sıradaki sandalyeye beklemesi için.
            printf("ogrenci %ld Arastirmagorevlisi odasindan ayrildi.\n",(long)ogrencinumarasi);
        }
        else
            printf("Ogrenci %ld baska bir zamanda donecek. \n", (long)ogrencinumarasi);   //öğrenci boş sandalye bulamazsa

    }
}
